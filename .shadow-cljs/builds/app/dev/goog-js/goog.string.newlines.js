["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/string/newlines.js"],"~:js","goog.provide(\"goog.string.newlines\");\ngoog.provide(\"goog.string.newlines.Line\");\ngoog.require(\"goog.array\");\ngoog.string.newlines.splitLines = function(str, opt_keepNewlines) {\n  var lines = goog.string.newlines.getLines(str);\n  return goog.array.map(lines, function(line) {\n    return opt_keepNewlines ? line.getFullLine() : line.getContent();\n  });\n};\ngoog.string.newlines.Line = function(string, startLineIndex, endContentIndex, endLineIndex) {\n  this.string = string;\n  this.startLineIndex = startLineIndex;\n  this.endContentIndex = endContentIndex;\n  this.endLineIndex = endLineIndex;\n};\ngoog.string.newlines.Line.prototype.getContent = function() {\n  return this.string.substring(this.startLineIndex, this.endContentIndex);\n};\ngoog.string.newlines.Line.prototype.getFullLine = function() {\n  return this.string.substring(this.startLineIndex, this.endLineIndex);\n};\ngoog.string.newlines.Line.prototype.getNewline = function() {\n  return this.string.substring(this.endContentIndex, this.endLineIndex);\n};\ngoog.string.newlines.getLines = function(str) {\n  var re = RegExp(\"\\r\\n|\\r|\\n\", \"g\");\n  var sliceIndex = 0;\n  var result;\n  var lines = [];\n  while (result = re.exec(str)) {\n    var line = new goog.string.newlines.Line(str, sliceIndex, result.index, result.index + result[0].length);\n    lines.push(line);\n    sliceIndex = re.lastIndex;\n  }\n  if (sliceIndex < str.length) {\n    var line = new goog.string.newlines.Line(str, sliceIndex, str.length, str.length);\n    lines.push(line);\n  }\n  return lines;\n};\n","~:source","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Utilities for string newlines.\n */\n\n\n/**\n * Namespace for string utilities\n */\ngoog.provide('goog.string.newlines');\ngoog.provide('goog.string.newlines.Line');\n\ngoog.require('goog.array');\n\n\n/**\n * Splits a string into lines, properly handling universal newlines.\n * @param {string} str String to split.\n * @param {boolean=} opt_keepNewlines Whether to keep the newlines in the\n *     resulting strings. Defaults to false.\n * @return {!Array<string>} String split into lines.\n */\ngoog.string.newlines.splitLines = function(str, opt_keepNewlines) {\n  'use strict';\n  var lines = goog.string.newlines.getLines(str);\n  return goog.array.map(lines, function(line) {\n    'use strict';\n    return opt_keepNewlines ? line.getFullLine() : line.getContent();\n  });\n};\n\n\n\n/**\n * Line metadata class that records the start/end indicies of lines\n * in a string.  Can be used to implement common newline use cases such as\n * splitLines() or determining line/column of an index in a string.\n * Also implements methods to get line contents.\n *\n * Indexes are expressed as string indicies into string.substring(), inclusive\n * at the start, exclusive at the end.\n *\n * Create an array of these with goog.string.newlines.getLines().\n * @param {string} string The original string.\n * @param {number} startLineIndex The index of the start of the line.\n * @param {number} endContentIndex The index of the end of the line, excluding\n *     newlines.\n * @param {number} endLineIndex The index of the end of the line, index\n *     newlines.\n * @constructor\n * @struct\n * @final\n */\ngoog.string.newlines.Line = function(\n    string, startLineIndex, endContentIndex, endLineIndex) {\n  'use strict';\n  /**\n   * The original string.\n   * @type {string}\n   */\n  this.string = string;\n\n  /**\n   * Index of the start of the line.\n   * @type {number}\n   */\n  this.startLineIndex = startLineIndex;\n\n  /**\n   * Index of the end of the line, excluding any newline characters.\n   * Index is the first character after the line, suitable for\n   * String.substring().\n   * @type {number}\n   */\n  this.endContentIndex = endContentIndex;\n\n  /**\n   * Index of the end of the line, excluding any newline characters.\n   * Index is the first character after the line, suitable for\n   * String.substring().\n   * @type {number}\n   */\n\n  this.endLineIndex = endLineIndex;\n};\n\n\n/**\n * @return {string} The content of the line, excluding any newline characters.\n */\ngoog.string.newlines.Line.prototype.getContent = function() {\n  'use strict';\n  return this.string.substring(this.startLineIndex, this.endContentIndex);\n};\n\n\n/**\n * @return {string} The full line, including any newline characters.\n */\ngoog.string.newlines.Line.prototype.getFullLine = function() {\n  'use strict';\n  return this.string.substring(this.startLineIndex, this.endLineIndex);\n};\n\n\n/**\n * @return {string} The newline characters, if any ('\\n', \\r', '\\r\\n', '', etc).\n */\ngoog.string.newlines.Line.prototype.getNewline = function() {\n  'use strict';\n  return this.string.substring(this.endContentIndex, this.endLineIndex);\n};\n\n\n/**\n * Splits a string into an array of line metadata.\n * @param {string} str String to split.\n * @return {!Array<!goog.string.newlines.Line>} Array of line metadata.\n */\ngoog.string.newlines.getLines = function(str) {\n  'use strict';\n  // We use the constructor because literals are evaluated only once in\n  // < ES 3.1.\n  // See http://www.mail-archive.com/es-discuss@mozilla.org/msg01796.html\n  var re = RegExp('\\r\\n|\\r|\\n', 'g');\n  var sliceIndex = 0;\n  var result;\n  var lines = [];\n\n  while (result = re.exec(str)) {\n    var line = new goog.string.newlines.Line(\n        str, sliceIndex, result.index, result.index + result[0].length);\n    lines.push(line);\n\n    // remember where to start the slice from\n    sliceIndex = re.lastIndex;\n  }\n\n  // If the string does not end with a newline, add the last line.\n  if (sliceIndex < str.length) {\n    var line =\n        new goog.string.newlines.Line(str, sliceIndex, str.length, str.length);\n    lines.push(line);\n  }\n\n  return lines;\n};\n","~:compiled-at",1633636256376,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.string.newlines.js\",\n\"lineCount\":41,\n\"mappings\":\"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\",\n\"sources\":[\"goog/string/newlines.js\"],\n\"sourcesContent\":[\"/**\\n * @license\\n * Copyright The Closure Library Authors.\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\n/**\\n * @fileoverview Utilities for string newlines.\\n */\\n\\n\\n/**\\n * Namespace for string utilities\\n */\\ngoog.provide('goog.string.newlines');\\ngoog.provide('goog.string.newlines.Line');\\n\\ngoog.require('goog.array');\\n\\n\\n/**\\n * Splits a string into lines, properly handling universal newlines.\\n * @param {string} str String to split.\\n * @param {boolean=} opt_keepNewlines Whether to keep the newlines in the\\n *     resulting strings. Defaults to false.\\n * @return {!Array<string>} String split into lines.\\n */\\ngoog.string.newlines.splitLines = function(str, opt_keepNewlines) {\\n  'use strict';\\n  var lines = goog.string.newlines.getLines(str);\\n  return goog.array.map(lines, function(line) {\\n    'use strict';\\n    return opt_keepNewlines ? line.getFullLine() : line.getContent();\\n  });\\n};\\n\\n\\n\\n/**\\n * Line metadata class that records the start/end indicies of lines\\n * in a string.  Can be used to implement common newline use cases such as\\n * splitLines() or determining line/column of an index in a string.\\n * Also implements methods to get line contents.\\n *\\n * Indexes are expressed as string indicies into string.substring(), inclusive\\n * at the start, exclusive at the end.\\n *\\n * Create an array of these with goog.string.newlines.getLines().\\n * @param {string} string The original string.\\n * @param {number} startLineIndex The index of the start of the line.\\n * @param {number} endContentIndex The index of the end of the line, excluding\\n *     newlines.\\n * @param {number} endLineIndex The index of the end of the line, index\\n *     newlines.\\n * @constructor\\n * @struct\\n * @final\\n */\\ngoog.string.newlines.Line = function(\\n    string, startLineIndex, endContentIndex, endLineIndex) {\\n  'use strict';\\n  /**\\n   * The original string.\\n   * @type {string}\\n   */\\n  this.string = string;\\n\\n  /**\\n   * Index of the start of the line.\\n   * @type {number}\\n   */\\n  this.startLineIndex = startLineIndex;\\n\\n  /**\\n   * Index of the end of the line, excluding any newline characters.\\n   * Index is the first character after the line, suitable for\\n   * String.substring().\\n   * @type {number}\\n   */\\n  this.endContentIndex = endContentIndex;\\n\\n  /**\\n   * Index of the end of the line, excluding any newline characters.\\n   * Index is the first character after the line, suitable for\\n   * String.substring().\\n   * @type {number}\\n   */\\n\\n  this.endLineIndex = endLineIndex;\\n};\\n\\n\\n/**\\n * @return {string} The content of the line, excluding any newline characters.\\n */\\ngoog.string.newlines.Line.prototype.getContent = function() {\\n  'use strict';\\n  return this.string.substring(this.startLineIndex, this.endContentIndex);\\n};\\n\\n\\n/**\\n * @return {string} The full line, including any newline characters.\\n */\\ngoog.string.newlines.Line.prototype.getFullLine = function() {\\n  'use strict';\\n  return this.string.substring(this.startLineIndex, this.endLineIndex);\\n};\\n\\n\\n/**\\n * @return {string} The newline characters, if any ('\\\\n', \\\\r', '\\\\r\\\\n', '', etc).\\n */\\ngoog.string.newlines.Line.prototype.getNewline = function() {\\n  'use strict';\\n  return this.string.substring(this.endContentIndex, this.endLineIndex);\\n};\\n\\n\\n/**\\n * Splits a string into an array of line metadata.\\n * @param {string} str String to split.\\n * @return {!Array<!goog.string.newlines.Line>} Array of line metadata.\\n */\\ngoog.string.newlines.getLines = function(str) {\\n  'use strict';\\n  // We use the constructor because literals are evaluated only once in\\n  // < ES 3.1.\\n  // See http://www.mail-archive.com/es-discuss@mozilla.org/msg01796.html\\n  var re = RegExp('\\\\r\\\\n|\\\\r|\\\\n', 'g');\\n  var sliceIndex = 0;\\n  var result;\\n  var lines = [];\\n\\n  while (result = re.exec(str)) {\\n    var line = new goog.string.newlines.Line(\\n        str, sliceIndex, result.index, result.index + result[0].length);\\n    lines.push(line);\\n\\n    // remember where to start the slice from\\n    sliceIndex = re.lastIndex;\\n  }\\n\\n  // If the string does not end with a newline, add the last line.\\n  if (sliceIndex < str.length) {\\n    var line =\\n        new goog.string.newlines.Line(str, sliceIndex, str.length, str.length);\\n    lines.push(line);\\n  }\\n\\n  return lines;\\n};\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"string\",\"newlines\",\"splitLines\",\"goog.string.newlines.splitLines\",\"str\",\"opt_keepNewlines\",\"lines\",\"getLines\",\"array\",\"map\",\"line\",\"getFullLine\",\"getContent\",\"Line\",\"goog.string.newlines.Line\",\"startLineIndex\",\"endContentIndex\",\"endLineIndex\",\"prototype\",\"goog.string.newlines.Line.prototype.getContent\",\"substring\",\"goog.string.newlines.Line.prototype.getFullLine\",\"getNewline\",\"goog.string.newlines.Line.prototype.getNewline\",\"goog.string.newlines.getLines\",\"re\",\"RegExp\",\"sliceIndex\",\"result\",\"exec\",\"index\",\"length\",\"push\",\"lastIndex\"]\n}\n"]